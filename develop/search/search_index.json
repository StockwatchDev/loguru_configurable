{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"loguru_configurable - version develop (to become 0.2.0)","text":"<p>Wrapper that adds an application_settings ConfigSection to loguru, a library which aims to bring enjoyable logging in Python.</p> <p>Also relies on loguru-config and loguru-logging-intercept.</p> <p>This project is licensed under the terms of the MIT license.</p>"},{"location":"1-Installation/","title":"Install the package","text":"<p><code>loguru_configurable</code> is available for pypi and can hence be installed with pip or poetry. The package is not available on conda.</p> <p>If you don't want to wait for a release and prefer to try the develop version, then you can install from our repo.</p> WindowsLinux <pre><code># From pypi with pip:\npy -m pip install -U loguru_configurable\n\n# From pypi with poetry:\npoetry add loguru_configurable\n\n# From the repo with pip:\npy -m pip install git+https://github.com/StockwatchDev/loguru_configurable#develop\n\n# From the repo with poetry:\npoetry add git+https://github.com/StockwatchDev/loguru_configurable#develop\n</code></pre> <pre><code># From pypi:\npython -m pip install -U loguru_configurable\n\n# From pypi with poetry:\npoetry add loguru_configurable\n\n# From the repo with pip:\npython -m pip install git+https://github.com/StockwatchDev/loguru_configurable#develop\n\n# From the repo with poetry:\npoetry add git+https://github.com/StockwatchDev/loguru_configurable#develop\n</code></pre> <p>We have direct dependencies on the following packages:</p> <ul> <li>application_settings</li> <li>loguru</li> <li>loguru-config</li> <li>loguru-logging-intercept</li> </ul>"},{"location":"2-Basic_usage/","title":"Basic usage","text":"<p>The <code>loguru_configurable</code> package is designed to simplify the configuration and integration of the <code>loguru</code> logging library with additional features like routing standard logging calls and defining custom logging levels. This guide explains how to use <code>loguru_configurable</code> in your Python application.</p>"},{"location":"2-Basic_usage/#setting-up-configuration","title":"Setting Up Configuration","text":""},{"location":"2-Basic_usage/#configuration-module","title":"Configuration Module","text":"<p>Define a module to load and manage the configuration of your application. For example, <code>config.py</code>:</p> <pre><code>from application_settings import ConfigBase, config_filepath_from_cli, dataclass\nfrom loguru_configurable import LoguruConfigSection\n\n@dataclass(frozen=True)\nclass ExampleConfig(ConfigBase):\n    \"\"\"Config for the application.\"\"\"\n    loguru_config: LoguruConfigSection = LoguruConfigSection()\n\n# Load config.\nconfig_filepath_from_cli(ExampleConfig, load=True)\n</code></pre> <p>This module uses <code>application_settings</code> to load the configuration from file.</p>"},{"location":"2-Basic_usage/#configuration-file","title":"Configuration File","text":"<p>Create a <code>config.toml</code> file to configure your logging setup. Here is an example:</p> <pre><code>[loguru_config]\ndo_configure = true\nintercept = true\n\nactivation = [[\"\", \"true\"], [\"my_module_1\", \"false\"]]\npatcher = \"my_module_1.my_patcher\"\n\n[[loguru_config.handlers]]\nsink = 'ext://sys.stderr'\nlevel = 'INFO'\nformat = '&lt;green&gt;{time:HH:mm:ss.SSS}&lt;/green&gt; | &lt;level&gt;{level: &lt;8}&lt;/level&gt; | &lt;level&gt;{message}&lt;/level&gt;'\n\n[[loguru_config.handlers]]\nsink = './logs/file-{time}.log'\nlevel = 'DEBUG'\nformat = '{time:YYYY-MM-DD HH:mm:ss.SSS} | {level: &lt;8} | {name}:{function}:{line} - {message}'\nenqueue = true\nserialize = false\n\n[[loguru_config.levels]]\nname = 'NEW'\nno = 13\nicon = '\u00a4'\ncolor = ''\n\n[[loguru_config.levels]]\nname = 'OLD'\nno = 31\n\n[loguru_config.extra]\ncontext = 'default'\n</code></pre> <p>This file defines:</p> <ul> <li>Handlers for console and file logging.</li> <li>Custom log levels (<code>NEW</code> and <code>OLD</code>).</li> <li>Extra context information.</li> <li>Interception of standard logging calls.</li> </ul>"},{"location":"2-Basic_usage/#logging-in-the-application","title":"Logging in the Application","text":""},{"location":"2-Basic_usage/#main-script","title":"Main Script","text":"<p>Here's a main script (<code>__main__.py</code>) to demonstrate the logging behavior:</p> <pre><code># Ensure configuration is loaded first\nimport config  # pylint: disable=unused-import  # isort: skip\n\nimport sys\nimport my_module_1\nimport my_module_2\nfrom loguru import logger\n\ndef main() -&gt; None:\n    \"\"\"Dummy method to demonstrate logging.\"\"\"\n    logger.error(\"Hay there.\")\n\n    my_module_1.do_logging()\n    my_module_2.do_logging(\"INFO\")\n    my_module_2.do_logging(\"NEW\")\n    my_module_2.do_logging(\"OLD\")\n    my_module_2.do_logging_with_bind(\"OLD\", \"not default\")\n    logger.debug(\"Bye...\")\n\nif __name__ == \"__main__\":\n    sys.exit(main())\n</code></pre>"},{"location":"2-Basic_usage/#supporting-modules","title":"Supporting Modules","text":""},{"location":"2-Basic_usage/#my_module_1py","title":"<code>my_module_1.py</code>","text":"<pre><code>import datetime\nimport logging\nimport loguru\n\ndef my_patcher(record: loguru.Record) -&gt; None:\n    \"\"\"Adds a UTC timestamp to the log record.\"\"\"\n    record[\"extra\"].update(utc=datetime.datetime.now(datetime.timezone.utc))\n\ndef do_logging() -&gt; None:\n    \"\"\"Logs a message at the specified level without binding.\"\"\"\n    loguru.logger.warning(\"This is a warning, sent to loguru\")\n    logging.warning(\"This is a warning, sent to the standard logger\")\n</code></pre>"},{"location":"2-Basic_usage/#my_module_2py","title":"<code>my_module_2.py</code>","text":"<pre><code>import loguru\n\ndef do_logging(level: str) -&gt; None:\n    \"\"\"Logs a message at the specified level without binding.\"\"\"\n    loguru.logger.log(level, \"This is a log message without bind\")\n\ndef do_logging_with_bind(level: str, context: str = \"default\") -&gt; None:\n    \"\"\"Logs a message with an optional context binding.\"\"\"\n    loguru.logger.bind(context=context).log(level, \"This is a log message with bind\")\n</code></pre>"},{"location":"2-Basic_usage/#output-example","title":"Output Example","text":"<p>Depending on your <code>config.toml</code> settings, you will see:</p> <ul> <li>Logs in the console with the specified format.</li> <li>Logs written to files in the <code>./logs</code> directory.</li> <li>Custom log levels (<code>NEW</code>, <code>OLD</code>) displayed.</li> <li>Standard logging calls routed through <code>loguru</code>.</li> </ul>"},{"location":"3-Configuration/","title":"Configuration options","text":"<p>This document provides a tabular overview of the configuration options available in the <code>loguru_configurable</code> module.</p> Option Type Default Description <code>inplace</code> <code>bool</code> <code>False</code> Whether modifications to the logger configuration should be made in-place. If False, a copy of the configuration is made before modifications are applied. <code>do_configure</code> <code>bool</code> <code>False</code> Whether to configure the logger after loading the configuration. If False, the configuration is loaded but not applied to the logger. Useful for modifying the LoguruConfig object before applying it to the logger. <code>activation</code> <code>list[tuple[str, bool]]</code> <code>[('', True)]</code> The activation configuration to be passed to <code>logger.add</code>. Contains tuples of <code>(logger_name, active)</code> indicating which loggers to activate. <code>handlers</code> <code>list[dict[str, Any]]</code> Default handler configuration of Loguru List of handler configurations specifying where to send formatted log messages. Each handler configuration is passed to <code>logger.add</code>. Defaults to the default handler configuration of loguru. <code>levels</code> <code>list[LoguruLevel]</code> <code>[]</code> A list of custom log levels to add to the standard levels. <code>extra</code> <code>dict[str, Any]</code> <code>{}</code> The default contents of the <code>extra</code> dictionary (without calling <code>logger.bind</code>). <code>patcher</code> <code>str</code> <code>''</code> Specifies the record-patcher parameter in <code>logger.configure</code>. Functions like <code>logger.patch</code>. Converts the string (if not empty) to a <code>Callable[[loguru.Record], None]</code>. <code>intercept</code> <code>bool</code> <code>False</code> Whether to intercept calls to Python's standard <code>logging</code> module and route them to loguru. <code>intercept_level</code> <code>str</code> <code>'DEBUG'</code> This level of calls to standard logging and above will be intercepted and routed to loguru. Valid values are <code>'DEBUG'</code>, <code>'INFO'</code>, <code>'WARNING'</code>, <code>'ERROR'</code>, and <code>'CRITICAL'</code>. <code>intercept_modules</code> <code>list[str]</code> <code>[]</code> A list of additional modules to intercept logging calls from."},{"location":"CHANGELOG/","title":"Changelog","text":"<p>All notable changes to this project will be documented in this file.</p> <p>The format is based on Keep a Changelog, and this project adheres to Semantic Versioning.</p>"},{"location":"CHANGELOG/#020-unreleased","title":"[0.2.0] - Unreleased","text":""},{"location":"CHANGELOG/#added-020","title":"Added 0.2.0","text":"<p>Nothing yet</p>"},{"location":"CHANGELOG/#010-2024-12-12","title":"[0.1.0] - 2024-12-12","text":""},{"location":"CHANGELOG/#added-010","title":"Added 0.1.0","text":"<ul> <li>Configuration for loguru</li> </ul>"},{"location":"reference/SUMMARY/","title":"SUMMARY","text":"<ul> <li>loguru_configurable<ul> <li>_version</li> <li>config</li> </ul> </li> </ul>"},{"location":"reference/loguru_configurable/__init__/","title":"init","text":"<p>Entry point of the loguru_configurable library, collects all exportable items and disables logging by default.</p>"},{"location":"reference/loguru_configurable/__init__/#loguru_configurable.LoguruConfigSection","title":"LoguruConfigSection","text":"<p>               Bases: <code>ConfigSectionBase</code></p> <p>ConfigSection for loguru-config</p>"},{"location":"reference/loguru_configurable/__init__/#loguru_configurable.LoguruConfigSection.inplace","title":"inplace  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>inplace = False\n</code></pre> <p>Whether modifications to the logger configuration should be made in-place. If False, a copy of the configuration is made before modifications are made. Defaults to False.</p>"},{"location":"reference/loguru_configurable/__init__/#loguru_configurable.LoguruConfigSection.do_configure","title":"do_configure  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>do_configure = False\n</code></pre> <p>Whether to configure the logger after loading the configuration. If False, the configuration is loaded but not applied to the logger. This is useful if you want to load the configuration and then modify the LoguruConfig object before applying it to the logger. Defaults to False (which differs from loguru_config, but it needs to be False, otherwise the default config will always be configured due to initialization of class variables).</p>"},{"location":"reference/loguru_configurable/__init__/#loguru_configurable.LoguruConfigSection.activation","title":"activation  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>activation = field(default_factory=lambda: [('', True)])\n</code></pre> <p>The activation configuration to be passed to <code>logger.add</code>. The sequence contains tuples of the form <code>(logger_name, active)</code>, where <code>logger_name</code> is the name of the logger to activate, and <code>active</code> is a boolean indicating whether the logger should be active or not; defaults to a list containing a single tuple to activate the root logger.</p>"},{"location":"reference/loguru_configurable/__init__/#loguru_configurable.LoguruConfigSection.handlers","title":"handlers  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>handlers = field(default_factory=default_handlers())\n</code></pre> <p>List of handlers to use. Each handler is given as a dict with parameters that configure the handler. The 'sink' parameter is mandatory and specifies where to send the formatted log messages. The handler configurations are passed to <code>logger.add</code> as keyword arguments. See the examples folder for examples. For more info on handler parameters refer to the logure docs. Defaults to the default handler configuration of loguru.</p>"},{"location":"reference/loguru_configurable/__init__/#loguru_configurable.LoguruConfigSection.levels","title":"levels  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>levels = field(default_factory=lambda: [])\n</code></pre> <p>A list of loguru logging levels, to add to the standard levels; defaults to an empty list.</p>"},{"location":"reference/loguru_configurable/__init__/#loguru_configurable.LoguruConfigSection.extra","title":"extra  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>extra = field(default_factory=lambda: {})\n</code></pre> <p>The default contents of the <code>extra</code> dictionary (without calling <code>logger.bind</code>); defaults to an empty dict.</p>"},{"location":"reference/loguru_configurable/__init__/#loguru_configurable.LoguruConfigSection.patcher","title":"patcher  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>patcher = ''\n</code></pre> <p>Specifies the record-patcher parameter in <code>logger.configure</code> that functions like <code>logger.patch</code>; post-init converts the string (if not empty) to a Callable[[loguru.Record], None]; defaults to ''.</p>"},{"location":"reference/loguru_configurable/__init__/#loguru_configurable.LoguruConfigSection.intercept","title":"intercept  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>intercept = False\n</code></pre> <p>Whether to intercept calls to Python's standard <code>logging</code> module and route them to loguru; defaults to False.</p>"},{"location":"reference/loguru_configurable/__init__/#loguru_configurable.LoguruConfigSection.intercept_level","title":"intercept_level  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>intercept_level = 'DEBUG'\n</code></pre> <p>This level of calls to standard logging and above will be intercepted and routed to loguru; defaults to 'DEBUG'. This is only used if <code>intercept</code> is True. Valid values: 'DEBUG', 'WARNING', 'INFO', 'ERROR' and 'CRITICAL'.</p>"},{"location":"reference/loguru_configurable/__init__/#loguru_configurable.LoguruConfigSection.intercept_modules","title":"intercept_modules  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>intercept_modules = field(default_factory=lambda: [])\n</code></pre> <p>A list of modules to intercept calls from, in addition to the root logger (which is always intercepted if intercept is True); defaults to an empty list.</p>"},{"location":"reference/loguru_configurable/__init__/#loguru_configurable.LoguruConfigSection.get_loguru_config","title":"get_loguru_config","text":"<pre><code>get_loguru_config()\n</code></pre> <p>Return a LoguruConfig instance initialized with the fields of self; so that one can do `.parse().configure()</p> Source code in <code>src\\loguru_configurable\\config.py</code> <pre><code>def get_loguru_config(self) -&gt; LoguruConfig:\n    \"\"\"Return a LoguruConfig instance initialized with the fields of self; so that one can do\n    `.parse().configure()\"\"\"\n    return LoguruConfig(**self._as_config_dict())\n</code></pre>"},{"location":"reference/loguru_configurable/_version/","title":"_version","text":"<p>Version module, current version</p>"},{"location":"reference/loguru_configurable/config/","title":"config","text":"<p>Module that defines a ConfigSection for loguru, uses loguru-config to configure loguru and loguru-logging-intercept to re-route standard logging calls</p>"},{"location":"reference/loguru_configurable/config/#loguru_configurable.config.LoguruLevel","title":"LoguruLevel","text":"<p>Defines a loguru log level</p>"},{"location":"reference/loguru_configurable/config/#loguru_configurable.config.LoguruLevel.name","title":"name  <code>instance-attribute</code>","text":"<pre><code>name\n</code></pre> <p>Name of the logging level</p>"},{"location":"reference/loguru_configurable/config/#loguru_configurable.config.LoguruLevel.no","title":"no  <code>instance-attribute</code>","text":"<pre><code>no\n</code></pre> <p>The severity of the level</p>"},{"location":"reference/loguru_configurable/config/#loguru_configurable.config.LoguruLevel.color","title":"color  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>color = ''\n</code></pre> <p>The color markup of the level; defaults to ''</p>"},{"location":"reference/loguru_configurable/config/#loguru_configurable.config.LoguruLevel.icon","title":"icon  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>icon = ''\n</code></pre> <p>The icon of the level; defaults to ''</p>"},{"location":"reference/loguru_configurable/config/#loguru_configurable.config.PatcherProtocol","title":"PatcherProtocol","text":"<p>               Bases: <code>Protocol</code></p> <p>Protocol class for a function argument for loguru.patch</p>"},{"location":"reference/loguru_configurable/config/#loguru_configurable.config.LoguruConfigSection","title":"LoguruConfigSection","text":"<p>               Bases: <code>ConfigSectionBase</code></p> <p>ConfigSection for loguru-config</p>"},{"location":"reference/loguru_configurable/config/#loguru_configurable.config.LoguruConfigSection.inplace","title":"inplace  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>inplace = False\n</code></pre> <p>Whether modifications to the logger configuration should be made in-place. If False, a copy of the configuration is made before modifications are made. Defaults to False.</p>"},{"location":"reference/loguru_configurable/config/#loguru_configurable.config.LoguruConfigSection.do_configure","title":"do_configure  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>do_configure = False\n</code></pre> <p>Whether to configure the logger after loading the configuration. If False, the configuration is loaded but not applied to the logger. This is useful if you want to load the configuration and then modify the LoguruConfig object before applying it to the logger. Defaults to False (which differs from loguru_config, but it needs to be False, otherwise the default config will always be configured due to initialization of class variables).</p>"},{"location":"reference/loguru_configurable/config/#loguru_configurable.config.LoguruConfigSection.activation","title":"activation  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>activation = field(default_factory=lambda: [('', True)])\n</code></pre> <p>The activation configuration to be passed to <code>logger.add</code>. The sequence contains tuples of the form <code>(logger_name, active)</code>, where <code>logger_name</code> is the name of the logger to activate, and <code>active</code> is a boolean indicating whether the logger should be active or not; defaults to a list containing a single tuple to activate the root logger.</p>"},{"location":"reference/loguru_configurable/config/#loguru_configurable.config.LoguruConfigSection.handlers","title":"handlers  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>handlers = field(default_factory=default_handlers())\n</code></pre> <p>List of handlers to use. Each handler is given as a dict with parameters that configure the handler. The 'sink' parameter is mandatory and specifies where to send the formatted log messages. The handler configurations are passed to <code>logger.add</code> as keyword arguments. See the examples folder for examples. For more info on handler parameters refer to the logure docs. Defaults to the default handler configuration of loguru.</p>"},{"location":"reference/loguru_configurable/config/#loguru_configurable.config.LoguruConfigSection.levels","title":"levels  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>levels = field(default_factory=lambda: [])\n</code></pre> <p>A list of loguru logging levels, to add to the standard levels; defaults to an empty list.</p>"},{"location":"reference/loguru_configurable/config/#loguru_configurable.config.LoguruConfigSection.extra","title":"extra  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>extra = field(default_factory=lambda: {})\n</code></pre> <p>The default contents of the <code>extra</code> dictionary (without calling <code>logger.bind</code>); defaults to an empty dict.</p>"},{"location":"reference/loguru_configurable/config/#loguru_configurable.config.LoguruConfigSection.patcher","title":"patcher  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>patcher = ''\n</code></pre> <p>Specifies the record-patcher parameter in <code>logger.configure</code> that functions like <code>logger.patch</code>; post-init converts the string (if not empty) to a Callable[[loguru.Record], None]; defaults to ''.</p>"},{"location":"reference/loguru_configurable/config/#loguru_configurable.config.LoguruConfigSection.intercept","title":"intercept  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>intercept = False\n</code></pre> <p>Whether to intercept calls to Python's standard <code>logging</code> module and route them to loguru; defaults to False.</p>"},{"location":"reference/loguru_configurable/config/#loguru_configurable.config.LoguruConfigSection.intercept_level","title":"intercept_level  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>intercept_level = 'DEBUG'\n</code></pre> <p>This level of calls to standard logging and above will be intercepted and routed to loguru; defaults to 'DEBUG'. This is only used if <code>intercept</code> is True. Valid values: 'DEBUG', 'WARNING', 'INFO', 'ERROR' and 'CRITICAL'.</p>"},{"location":"reference/loguru_configurable/config/#loguru_configurable.config.LoguruConfigSection.intercept_modules","title":"intercept_modules  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>intercept_modules = field(default_factory=lambda: [])\n</code></pre> <p>A list of modules to intercept calls from, in addition to the root logger (which is always intercepted if intercept is True); defaults to an empty list.</p>"},{"location":"reference/loguru_configurable/config/#loguru_configurable.config.LoguruConfigSection.get_loguru_config","title":"get_loguru_config","text":"<pre><code>get_loguru_config()\n</code></pre> <p>Return a LoguruConfig instance initialized with the fields of self; so that one can do `.parse().configure()</p> Source code in <code>src\\loguru_configurable\\config.py</code> <pre><code>def get_loguru_config(self) -&gt; LoguruConfig:\n    \"\"\"Return a LoguruConfig instance initialized with the fields of self; so that one can do\n    `.parse().configure()\"\"\"\n    return LoguruConfig(**self._as_config_dict())\n</code></pre>"},{"location":"reference/loguru_configurable/config/#loguru_configurable.config.default_handlers","title":"default_handlers","text":"<pre><code>default_handlers()\n</code></pre> <p>Returns a default handler field for LoguruConfigSection.handlers; equals the default handler of loguru</p> Source code in <code>src\\loguru_configurable\\config.py</code> <pre><code>def default_handlers() -&gt; Callable[[], list[dict[str, Any]]]:\n    \"\"\"Returns a default handler field for LoguruConfigSection.handlers; equals the default handler of loguru\"\"\"\n\n    return lambda: [\n        {\n            \"sink\": \"ext://sys.stderr\",\n            \"format\": \"&lt;green&gt;{time:YYYY-MM-DD HH:mm:ss.SSS}&lt;/green&gt; | &lt;level&gt;{level: &lt;8}&lt;/level&gt; | &lt;cyan&gt;{name}&lt;/cyan&gt;:&lt;cyan&gt;{function}&lt;/cyan&gt;:&lt;cyan&gt;{line}&lt;/cyan&gt; - &lt;level&gt;{message}&lt;/level&gt;\",\n            \"level\": \"DEBUG\",\n        }\n    ]\n</code></pre>"}]}